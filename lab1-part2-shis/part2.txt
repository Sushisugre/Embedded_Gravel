Author: Shi Su, AndrewID: shis

********** strTable.s **********

1. Replace count-up loop with count-down loop
Changed from:
    mov r2, #0  @ r2 is the index
    ...
    add r2, r2, #1  @ r2++
    cmp r2, r0   @ while r2 < dl
    blt .L9
To:
    sub r2, r0, #1  @ array index r2 = dl - 1
    ...
    subs r2, r2, #1  @ r2--
    bge .L9  @ while r2 >= 0

2. Combined the mod operation, to avoid code duplication 
Changed from:
    sub ip, r3, #23    @ip = r3 - 23
    cmp ip, #22
    ble .L13
.L7:    @ ip % 23
    sub ip, ip, #23
    cmp ip, #22
    bgt .L7
To:
    mov ip, r3
.L7:
    sub ip, ip, #23
    cmp ip, #22
    bgt .L7

3. Avoid loading same character from memory twice
Changed from:
    ldrb    r3, [r5, ip]    @ zero_extendqisi2
    ldrb    r6, [r1, r2]    @ zero_extendqisi2
    cmp r3, r6
    strneb  r6, [r5, ip]
To:
    ldrb    r6, [r5, ip]    @ zero_extendqisi2
    cmp r3, r6
    strneb  r3, [r5, ip]

4. Store the character from dst directly without checking the character in str,
the time it saved from occastionally same char case is much less than the overhead of 
performing load and compare each time
Changed from:
    ldrb    r6, [r5, ip]    @ zero_extendqisi2
    cmp r3, r6
    strneb  r3, [r5, ip]
To:
    strb  r3, [r5, ip] 

5. Don't backup r6, since after the previous change, the function no longer modify the value of r6
Changed from:
    stmfd   sp!, {r4, r5, r6}
    ...
    ldmfd   sp!, {r4, r5, r6} 
To:
    stmfd   sp!, {r4, r5}
    ...
    ldmfd   sp!, {r4, r5}    


********** part2c.c **********

For Optimization o1: 

1. Used xor operation to replace the inner loop
because a^a=0, 0^b=b, and xor operation is communtative and associative,
so we can tell that the result of all array elements xor together will be the single item

2. Used count-down loop to replace count-up loop, 
as count-down loop can be implemented with 2 intructions instead of 3 in count-up loop

For Optimization o2: 


