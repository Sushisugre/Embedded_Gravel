@ start.S: Kernel startup routine
@
@ Author: Mengjin Yan <myan1@andrew.cmu.edu>
@ Date:   Fri Oct 23 23:24:33 EDT 2015

	.file	"start.S"
	.text

	.global	_start
_start:
	@ Install swi_handler
	ldr	r0, =0x5c0009c0
	ldmia	r0, {r1, r2}		@ Load the original handler
	stmfd	sp!, {r1, r2, lr}	@ Store the orignal handler on stack
	ldr	r1, =0xe52ff004		@ Store "ldr pc, [pc, #-4]" into memory
	str	r1, [r0], #4		
	ldr	r1, =S_Handler		@ Store "&S_Handler" into memory
	str	r1, [r0]

	swi	0x900005

	ldmfd	sp!, {r1, r2, lr}	@ Restore the orignal handler
	str	r2, [r0], #-4
 	str	r1, [r0]
	
	
	@ Branch immediately to main without altering the execution environment.
	@ This indirection is needed to guarantee that the program entry point is
	@ LOAD_ADDR (probably 0xa3000000) without placing strict
	@ requirements on the layout of kernel.c.
	bl	main
	movs	pc, lr

S_Handler:
	@ The assemply part of the swi handler
	stmfd	sp!, {r0-r12, lr} 	@ Store user's gp registers and lr_svc
	mov	r1, sp 			@ r1 now contains pointer to parameters on stack
	ldr	r0, [lr, #-4] 		@ extract the SWI number
	bic	r0, r0, #0xff000000 	@ get SWI # in r0 by bit-msking
	bl	C_SWI_handler		@ go to handler
	ldmfd	sp!, {r0-r12, lr}
	movs	pc, lr			@ return from handler

